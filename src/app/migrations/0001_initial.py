# Generated by Django 4.2 on 2023-05-09 13:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import app.internal.bank.db.models
import app.internal.users.db.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('number', models.PositiveBigIntegerField(primary_key=True, serialize=False, unique=True, validators=[app.internal.bank.db.models.validate_account], verbose_name='Account number')),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Balance')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='telegram ID')),
                ('name', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='username')),
                ('password', models.CharField(default=None, max_length=255, null=True)),
                ('phone_number', models.CharField(blank=True, default=None, max_length=12, null=True, validators=[app.internal.users.db.models.validate_phone], verbose_name='phone number')),
                ('favorite_users', models.ManyToManyField(to='app.user', verbose_name='favorite users list')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Amount')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('from_account', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='from_account', to='app.account', verbose_name='From account')),
                ('to_account', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='to_account', to='app.account', verbose_name='To account')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
            },
        ),
        migrations.CreateModel(
            name='RefreshToken',
            fields=[
                ('jti', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('revoked', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refresh_token', to='app.user')),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('number', models.PositiveBigIntegerField(primary_key=True, serialize=False, unique=True, validators=[app.internal.bank.db.models.validate_card], verbose_name='Card number')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.account', verbose_name='Account number')),
            ],
            options={
                'verbose_name': 'Card',
                'verbose_name_plural': 'Cards',
            },
        ),
        migrations.AddField(
            model_name='account',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='User profile'),
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
